# 
#   Copyright (c) 2014-2017 Philipp Paulweber
#   All rights reserved.
# 
#   Developed by: Philipp Paulweber
#                 https://github.com/ppaulweber/liborg
# 
#   This file is part of liborg.
# 
#   liborg is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
# 
#   liborg is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
# 
#   You should have received a copy of the GNU General Public License
#   along with liborg. If not, see <http://www.gnu.org/licenses/>.
# 
#   Additional permission under GNU GPL version 3 section 7
# 
#   liborg is distributed under the terms of the GNU General Public License
#   with the following clarification and special exception: Linking liborg
#   statically or dynamically with other modules is making a combined work
#   based on liborg. Thus, the terms and conditions of the GNU General
#   Public License cover the whole combination. As a special exception,
#   the copyright holders of liborg give you permission to link liborg
#   with independent modules to produce an executable, regardless of the
#   license terms of these independent modules, and to copy and distribute
#   the resulting executable under terms of your choice, provided that you
#   also meet, for each linked independent module, the terms and conditions
#   of the license of that module. An independent module is a module which
#   is not derived from or based on liborg. If you modify liborg, you
#   may extend this exception to your version of the library, but you are
#   not obliged to do so. If you do not wish to do so, delete this exception
#   statement from your version.
# 

#+latex_header: \lstdefinestyle{casm}
#+latex_header: { basicstyle      = \ttfamily\small
#+latex_header: , keywordstyle    = \color{black}\bfseries
#+latex_header: , commentstyle    = \color{gray}\emph
#+latex_header: , stringstyle     = \color{black}\bfseries
#+latex_header: , numberstyle     = \color{black}\bfseries
#+latex_header: , backgroundcolor = \color{gray!20}
#+latex_header: , morecomment     = [l]{//}
#+latex_header: , morecomment     = [l]{///}
#+latex_header: , morecomment     = [s]{/*}{*/}
#+latex_header: , morestring      = [b]"
#+latex_header: , captionpos      = b
#+latex_header: , numbers         = left
#+latex_header: , numbersep       = 5pt
#+latex_header: , stepnumber      = 1
#+latex_header: , sensitive       = true, escapeinside={@(}{)@}
#+latex_header: , morekeywords    = 
#+latex_header:   { CASM, init
#+latex_header:   , function, derived, rule, enum, controlled, symbolic, static
#+latex_header:   , true, false, self, undef
#+latex_header:   , Boolean, Integer, String, Rational, Bit, RuleRef
#+latex_header:   , @
#+latex_header:   , par, endpar, seq, endseq
#+latex_header:   , skip, call, let, if, then, else, case, of, forall, in, iterate, do
#+latex_header:   , assert, abort, assume, impossible, print, println, debug
#+latex_header:   }
#+latex_header: }

#+latex_header: \lstdefinelanguage{casm-slides} 
#+latex_header: { basicstyle     =\ttfamily\scriptsize
#+latex_header: , keywordstyle   =\color{black}\bfseries
#+latex_header: , commentstyle   =\color{gray}\emph
#+latex_header: , stringstyle    =\color{black}\bfseries
#+latex_header: , morecomment    =[l]{//}
#+latex_header: , morecomment    =[l]{///}
#+latex_header: , morecomment    =[s]{/*}{*/}
#+latex_header: , morestring     =[b]"
#+latex_header: , captionpos     =b,
#+latex_header: , sensitive      =true, escapeinside={@(}{)@}
#+latex_header: , morekeywords   = 
#+latex_header:   { CASM, init
#+latex_header:   , function, derived, rule, enum, controlled, symbolic, static
#+latex_header:   , true, false, self, undef
#+latex_header:   , Boolean, Integer, String, Self, RuleRef
#+latex_header:   , @
#+latex_header:   , par, endpar, seq, endseq
#+latex_header:   , skip, call, let, if, then, else, case, of, forall, in, iterate, do
#+latex_header:   , assert, abort, assume, impossible, print, println, debug
#+latex_header:   }
#+latex_header: }

#+latex_header: \lstdefinelanguage{casm-el} 
#+latex_header: { basicstyle     =\ttfamily\scriptsize
#+latex_header: , keywordstyle   =\color{black}\bfseries
#+latex_header: , commentstyle   =\color{gray}\emph
#+latex_header: , stringstyle    =\color{black}\bfseries
#+latex_header: , morecomment    =[l]{//}
#+latex_header: , morecomment    =[l]{///}
#+latex_header: , morecomment    =[s]{/*}{*/}
#+latex_header: , morestring     =[b]"
#+latex_header: , sensitive      =true, escapeinside={@(}{)@}
#+latex_header: , morekeywords   = 
#+latex_header:   { function, intrinsic, reference, par, statement, alloc, call
#+latex_header:   }
#+latex_header: }

#+latex_header: \lstdefinelanguage{casm-c} 
#+latex_header: { basicstyle     =\ttfamily\scriptsize
#+latex_header: , keywordstyle   =\color{black}\bfseries
#+latex_header: , commentstyle   =\color{gray}\emph
#+latex_header: , stringstyle    =\color{black}\bfseries
#+latex_header: , morecomment    =[l]{//}
#+latex_header: , morecomment    =[l]{///}
#+latex_header: , morecomment    =[s]{/*}{*/}
#+latex_header: , morestring     =[b]"
#+latex_header: , sensitive      =true, escapeinside={@(}{)@}
#+latex_header: , morekeywords   = 
#+latex_header:   { void, static, unit8_t, unit64_t, Update, inline, Integer
#+latex_header:   }
#+latex_header: }

#+latex_header: \lstdefinelanguage{casm-vhdl} 
#+latex_header: { basicstyle     =\ttfamily\scriptsize
#+latex_header: , keywordstyle   =\color{black}\bfseries
#+latex_header: , commentstyle   =\color{gray}\emph
#+latex_header: , stringstyle    =\color{black}\bfseries
#+latex_header: , morecomment    =[l]{--}
#+latex_header: , morecomment    =[l]{---}
#+latex_header: , morestring     =[b]"
#+latex_header: , sensitive      =true, escapeinside={@(}{)@}
#+latex_header: , morekeywords   = 
#+latex_header:   { library, use, entity, is, port, map, end, architecture, of, signal, begin, if, then, else, process, elsif
#+latex_header:   }
#+latex_header: }
